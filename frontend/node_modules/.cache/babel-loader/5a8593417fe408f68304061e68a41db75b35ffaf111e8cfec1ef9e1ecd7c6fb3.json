{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const fetchCustomers = createAsyncThunk('customers/fetchCustomers', async () => {\n  const response = await axios.get(`${API_URL}/customers`);\n  return response.data;\n});\nexport const addCustomer = createAsyncThunk('customers/addCustomer', async customerData => {\n  const response = await axios.post(`${API_URL}/customers`, customerData);\n  return response.data;\n});\nconst customerSlice = createSlice({\n  name: 'customers',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    updateCustomerPurchaseAmount: (state, action) => {\n      const {\n        customerId,\n        amount\n      } = action.payload;\n      const customer = state.items.find(c => c._id === customerId);\n      if (customer) {\n        customer.totalPurchaseAmount += amount;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCustomers.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchCustomers.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchCustomers.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addCustomer.fulfilled, (state, action) => {\n      state.items.push(action.payload);\n    });\n  }\n});\nexport const {\n  updateCustomerPurchaseAmount\n} = customerSlice.actions;\nexport default customerSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","process","env","REACT_APP_API_URL","fetchCustomers","response","get","data","addCustomer","customerData","post","customerSlice","name","initialState","items","status","error","reducers","updateCustomerPurchaseAmount","state","action","customerId","amount","payload","customer","find","c","_id","totalPurchaseAmount","extraReducers","builder","addCase","pending","fulfilled","rejected","message","push","actions","reducer"],"sources":["/Users/divyanshjha/Developer/SwiftBill/frontend/src/store/slices/customerSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const fetchCustomers = createAsyncThunk(\n  'customers/fetchCustomers',\n  async () => {\n    const response = await axios.get(`${API_URL}/customers`);\n    return response.data;\n  }\n);\n\nexport const addCustomer = createAsyncThunk(\n  'customers/addCustomer',\n  async (customerData) => {\n    const response = await axios.post(`${API_URL}/customers`, customerData);\n    return response.data;\n  }\n);\n\nconst customerSlice = createSlice({\n  name: 'customers',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    updateCustomerPurchaseAmount: (state, action) => {\n      const { customerId, amount } = action.payload;\n      const customer = state.items.find(c => c._id === customerId);\n      if (customer) {\n        customer.totalPurchaseAmount += amount;\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCustomers.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchCustomers.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.items = action.payload;\n      })\n      .addCase(fetchCustomers.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addCustomer.fulfilled, (state, action) => {\n        state.items.push(action.payload);\n      });\n  },\n});\n\nexport const { updateCustomerPurchaseAmount } = customerSlice.actions;\nexport default customerSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,0BAA0B,EAC1B,YAAY;EACV,MAAMO,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,YAAY,CAAC;EACxD,OAAOK,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGV,gBAAgB,CACzC,uBAAuB,EACvB,MAAOW,YAAY,IAAK;EACtB,MAAMJ,QAAQ,GAAG,MAAMN,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,YAAY,EAAES,YAAY,CAAC;EACvE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,MAAMI,aAAa,GAAGd,WAAW,CAAC;EAChCe,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,4BAA4B,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/C,MAAM;QAAEC,UAAU;QAAEC;MAAO,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC7C,MAAMC,QAAQ,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKN,UAAU,CAAC;MAC5D,IAAIG,QAAQ,EAAE;QACZA,QAAQ,CAACI,mBAAmB,IAAIN,MAAM;MACxC;IACF;EACF,CAAC;EACDO,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC3B,cAAc,CAAC4B,OAAO,EAAGb,KAAK,IAAK;MAC1CA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAAC3B,cAAc,CAAC6B,SAAS,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACG,OAAO;IAC9B,CAAC,CAAC,CACDQ,OAAO,CAAC3B,cAAc,CAAC8B,QAAQ,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACJ,KAAK,CAACmB,OAAO;IACpC,CAAC,CAAC,CACDJ,OAAO,CAACvB,WAAW,CAACyB,SAAS,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACL,KAAK,CAACsB,IAAI,CAAChB,MAAM,CAACG,OAAO,CAAC;IAClC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL;AAA6B,CAAC,GAAGP,aAAa,CAAC0B,OAAO;AACrE,eAAe1B,aAAa,CAAC2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}