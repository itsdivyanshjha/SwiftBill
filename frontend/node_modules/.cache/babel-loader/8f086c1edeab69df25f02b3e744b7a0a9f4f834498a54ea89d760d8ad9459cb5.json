{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\n  const response = await axios.get(`${API_URL}/products`);\n  return response.data;\n});\nexport const addProduct = createAsyncThunk('products/addProduct', async productData => {\n  const response = await axios.post(`${API_URL}/products`, productData);\n  return response.data;\n});\nconst productSlice = createSlice({\n  name: 'products',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    updateProductQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const product = state.items.find(p => p._id === productId);\n      if (product) {\n        product.quantity = quantity;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProducts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchProducts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchProducts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addProduct.fulfilled, (state, action) => {\n      state.items.push(action.payload);\n    });\n  }\n});\nexport const {\n  updateProductQuantity\n} = productSlice.actions;\nexport default productSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","process","env","REACT_APP_API_URL","fetchProducts","response","get","data","addProduct","productData","post","productSlice","name","initialState","items","status","error","reducers","updateProductQuantity","state","action","productId","quantity","payload","product","find","p","_id","extraReducers","builder","addCase","pending","fulfilled","rejected","message","push","actions","reducer"],"sources":["/Users/divyanshjha/Developer/SwiftBill/frontend/src/store/slices/productSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const fetchProducts = createAsyncThunk(\n  'products/fetchProducts',\n  async () => {\n    const response = await axios.get(`${API_URL}/products`);\n    return response.data;\n  }\n);\n\nexport const addProduct = createAsyncThunk(\n  'products/addProduct',\n  async (productData) => {\n    const response = await axios.post(`${API_URL}/products`, productData);\n    return response.data;\n  }\n);\n\nconst productSlice = createSlice({\n  name: 'products',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    updateProductQuantity: (state, action) => {\n      const { productId, quantity } = action.payload;\n      const product = state.items.find(p => p._id === productId);\n      if (product) {\n        product.quantity = quantity;\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchProducts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProducts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.items = action.payload;\n      })\n      .addCase(fetchProducts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addProduct.fulfilled, (state, action) => {\n        state.items.push(action.payload);\n      });\n  },\n});\n\nexport const { updateProductQuantity } = productSlice.actions;\nexport default productSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,OAAO,MAAMC,aAAa,GAAGN,gBAAgB,CAC3C,wBAAwB,EACxB,YAAY;EACV,MAAMO,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,WAAW,CAAC;EACvD,OAAOK,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CACxC,qBAAqB,EACrB,MAAOW,WAAW,IAAK;EACrB,MAAMJ,QAAQ,GAAG,MAAMN,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,WAAW,EAAES,WAAW,CAAC;EACrE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,MAAMI,YAAY,GAAGd,WAAW,CAAC;EAC/Be,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,qBAAqB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxC,MAAM;QAAEC,SAAS;QAAEC;MAAS,CAAC,GAAGF,MAAM,CAACG,OAAO;MAC9C,MAAMC,OAAO,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKN,SAAS,CAAC;MAC1D,IAAIG,OAAO,EAAE;QACXA,OAAO,CAACF,QAAQ,GAAGA,QAAQ;MAC7B;IACF;EACF,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC1B,aAAa,CAAC2B,OAAO,EAAGZ,KAAK,IAAK;MACzCA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDe,OAAO,CAAC1B,aAAa,CAAC4B,SAAS,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACG,OAAO;IAC9B,CAAC,CAAC,CACDO,OAAO,CAAC1B,aAAa,CAAC6B,QAAQ,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACJ,KAAK,CAACkB,OAAO;IACpC,CAAC,CAAC,CACDJ,OAAO,CAACtB,UAAU,CAACwB,SAAS,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACL,KAAK,CAACqB,IAAI,CAACf,MAAM,CAACG,OAAO,CAAC;IAClC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL;AAAsB,CAAC,GAAGP,YAAY,CAACyB,OAAO;AAC7D,eAAezB,YAAY,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}